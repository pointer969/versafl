{"!name":"sap.ui.integration","!version":"1.20.0","!define":{"sap.ui.integration":{"!description":"SAPUI5 library with controls specialized for SAP Fiori apps.","CardDataMode":"sap.ui.integration.CardDataMode","!module":"sap/ui/integration/library","!helpDescription":"SAPUI5 library with controls specialized for SAP Fiori apps.","!category":"namespace","widgets":"sap.ui.integration.widgets"},"sap":{"sap":"sap","ui":"sap.ui","!category":"namespace"},"sap.ui.integration.widgets":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nSee {@link sap.ui.core.RenderManager#writeInvisiblePlaceholderData RenderManager#writeInvisiblePlaceholderData} for details.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"manifest":{"!description":"The URL of the manifest or an object.","!category":"enum","!type":"Object"},"!category":"namespace","Card":"sap.ui.integration.widgets.Card_obj","dataMode":{"!description":"Defines the state of the <code>Card<\/code>. When set to <code>Inactive<\/code>, the <code>Card<\/code> doesn't make requests.","!category":"enum","!type":"sap.ui.integration.CardDataMode"},"blocked":{"!description":"Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is raised.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup}.","!category":"enum","!type":"[String]"},"width":{"!description":"Defines the width of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"},"parameters":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"Object"},"height":{"!description":"Defines the height of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"}},"sap.ui":{"integration":"sap.ui.integration","!category":"namespace"},"sap.ui.integration.CardDataMode":{"!description":"Possible data modes for <code>{@link sap.ui.integration.widgets.Card}<\/code>.","Active":{"!description":"When in this mode, the card can make requests.","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library","Inactive":{"!description":"When in this mode, the card cannot make requests.","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.integration.widgets.Card_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.widgets.Card with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.widgets.Card"},"sap.ui.integration.widgets.Card":{"getManifest":{"!description":"Overwrites getter for card manifest.","!static":false,"!category":"function","!type":"fn() -> String | Object"},"isReady":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.core.Control","fireAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.widgets.Card","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nDefines the width of the card.\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"attachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setParameters":{"!description":"Overwrites setter for card params.","!static":false,"!category":"function","!type":"fn(vValue: Object) -> sap.ui.integration.widgets.Card","parameters":{"vValue":"type: Object, description: oParameters Parameters set in the card trough parameters property."}},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nDefines the height of the card.\n\nDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new <code>Card<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getManifest manifest} : any (default: )<\/li>\n<li>{@link #getParameters parameters} : object<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getDataMode dataMode} : sap.ui.integration.CardDataMode (default: Active)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getHostConfigurationId hostConfigurationId} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:action action} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getCardHeader":{"!description":"Implements sap.f.ICard interface.","!static":false,"!category":"function","!type":"fn() -> sap.f.cards.IHeader"},"getCardHeaderPosition":{"!description":"Implements sap.f.ICard interface.","!static":false,"!category":"function","!type":"fn() -> sap.f.cards.HeaderPosition"},"getDataMode":{"!description":"Gets current value of property {@link #getDataMode dataMode}.\n\nDefines the state of the <code>Card<\/code>. When set to <code>Inactive<\/code>, the <code>Card<\/code> doesn't make requests.\n\nDefault value is <code>Active<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.CardDataMode"},"setDataMode":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sMode: sap.ui.integration.CardDataMode) -> sap.ui.integration.widgets.Card","parameters":{"sMode":"type: sap.ui.integration.CardDataMode, description: The mode to set to the Card."}},"!description":"A control that represents a container with a header and content.\n\n<h3>Overview<\/h3> Cards are small user interface elements which provide the most important information from an app, related to a specific role or task. The information is represented in a compact manner, allowing for actions to be executed. Cards can be described as small representations of an app which can be integrated in different systems.\n\nThe integration card is defined in a declarative way, using a manifest.json to be: <ul> <li>Easily integrated into apps<\/li> <li>Easily reused across apps<\/li> <li>Understandable by other technologies<\/li> <li>Self-contained (without external configuration)<\/li> <li>Easily reconfigured in app layers (including backend)<\/li> <li>Easy to separate the roles of the card and the app developers<\/li> <\/ul>\n\nThe role of the card developer is to describe the card in a manifest.json file and define: <ul> <li>Header<\/li> <li>Content<\/li> <li>Data source<\/li> <li>Possible actions<\/li> <\/ul>\n\nThe role of the app developer is to integrate the card into the app and define: <ul> <li>The dimensions of the card inside a layout of choice, using the <code>width<\/code> and <code>height<\/code> properties<\/li> <li>The behavior for the actions described in the manifest.json file, using the action event<\/li> <\/ul>\n\n<h3>Usage<\/h3>\n\nThe <code>\"sap.app\"<\/code> <code>type<\/code> property in the manifest file must be set to <code>\"card\"<\/code>. The namespace used to define a card is <code>\"sap.card\"<\/code>. Every card has a type which can be one of the following: List, Analytical, Timeline, Object, Table, Component (experimental)\n\nAn example of a manifest.json:\n\n<pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\",\n    ...\n  },\n  \"sap.ui5\": {\n    ...\n  },\n  \"sap.card\": {\n    \"type\": \"List\",\n    \"header\": { ... },\n    \"content\": { ... }\n  }\n}\n<\/code>\n<\/pre>\n\nExamples of header sections:\n\nThe default header type can contain title, subtitle, icon, and status. <pre>\n <code>\n{\n  ...\n  \"sap.card\": {\n    \"header\": {\n      \"title\": \"An example title\",\n      \"subTitle\": \"Some subtitle\",\n      \"icon\": {\n        \"src\": \"sap-icon://business-objects-experience\"\n      },\n      \"status\": {\n        \"text\": \"5 of 20\"\n      }\n    },\n    ...\n  }\n}\n <\/code>\n <\/pre>\n\nThe numeric header type can contain title, subtitle, unitOfMeasurement, details, main indicator, and side indicators. <pre>\n <code>\n{\n  ...\n  \"sap.card\": {\n    \"header\": {\n      \"type\": \"Numeric\",\n      \"title\": \"Project Cloud Transformation\",\n      \"subTitle\": \"Revenue\",\n      \"unitOfMeasurement\": \"EUR\",\n      \"mainIndicator\": {\n        \"number\": \"44\",\n        \"unit\": \"%\",\n        \"trend\": \"Down\",\n        \"state\": \"Critical\"\n      },\n      \"details\": \"Some details\",\n      \"sideIndicators\": [\n        {\n          \"title\": \"Target\",\n          \"number\": \"17\",\n          \"unit\": \"%\"\n        },\n        {\n          \"title\": \"Deviation\",\n          \"number\": \"5\",\n          \"unit\": \"%\"\n        }\n      ]\n    },\n    ...\n  }\n}\n <\/code>\n <\/pre>\n\nThe content of the card is created based on the card type. Possible card types: <ul> <li>List<\/li> <li>Object<\/li> <li>Timeline<\/li> <li>Analytical<\/li> <li>Table<\/li> <li>Component (experimental)<\/li> <\/ul>\n\nList card contains a set of items. The <code>\"item\"<\/code> property defines the template for all the items of the list. The <code>\"data\"<\/code> property provides the displayed information.\n\nExample: <pre>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"List\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"data\": {\n        \"json\": [{\n            \"Name\": \"Comfort Easy\",\n            \"Description\": \"A 32 GB Digital Assistant with a high-resolution color screen\",\n            \"Highlight\": \"Error\"\n          },\n          {\n            \"Name\": \"ITelO Vault\",\n            \"Description\": \"A Digital Organizer with state-of-the-art Storage Encryption\",\n            \"Highlight\": \"Warning\"\n          },\n          {\n            \"Name\": \"Notebook Professional 15\",\n            \"Description\": \"Notebook Professional 15 description\",\n            \"Highlight\": \"Success\"\n          }\n        ]\n      },\n      \"item\": {\n        \"title\": {\n          \"label\": \"{{title_label}}\",\n          \"value\": \"{Name}\"\n        },\n        \"description\": {\n          \"label\": \"{{description_label}}\",\n          \"value\": \"{Description}\"\n        },\n        \"highlight\": \"{Highlight}\"\n      }\n    }\n  }\n}\n<\/pre>\n\nAnalytical card contains a chart visualization configuration. Supported chart types are Line, StackedBar, StackedColumn, Donut.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"Analytical\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"chartType\": \"Line\",\n      \"legend\": {\n        \"visible\": true,\n        \"position\": \"Bottom\",\n        \"alignment\": \"Left\"\n      },\n      \"plotArea\": {\n        \"dataLabel\": {\n          \"visible\": true\n        },\n        \"categoryAxisText\": {\n          \"visible\": false\n        },\n        \"valueAxisText\": {\n          \"visible\": false\n        }\n      },\n      \"title\": {\n        \"text\": \"Line chart\",\n        \"visible\": true,\n        \"alignment\": \"Left\"\n      },\n      \"measureAxis\": \"valueAxis\",\n      \"dimensionAxis\": \"categoryAxis\",\n      \"data\": {\n        \"json\": {\n          \"list\": [\n            {\n              \"Week\": \"CW14\",\n              \"Revenue\": 431000.22,\n              \"Cost\": 230000.00,\n              \"Cost1\": 24800.63,\n              \"Cost2\": 205199.37,\n              \"Cost3\": 199999.37,\n              \"Target\": 500000.00,\n              \"Budget\": 210000.00\n            },\n            {\n              \"Week\": \"CW15\",\n              \"Revenue\": 494000.30,\n              \"Cost\": 238000.00,\n              \"Cost1\": 99200.39,\n              \"Cost2\": 138799.61,\n              \"Cost3\": 200199.37,\n              \"Target\": 500000.00,\n              \"Budget\": 224000.00\n            }\n          ]\n        },\n        \"path\": \"/list\"\n      },\n      \"dimensions\": [\n        {\n          \"label\": \"Weeks\",\n          \"value\": \"{Week}\"\n        }\n      ],\n      \"measures\": [\n        {\n          \"label\": \"Revenue\",\n          \"value\": \"{Revenue}\"\n        },\n        {\n          \"label\": \"Cost\",\n          \"value\": \"{Cost}\"\n        }\n      ]\n    }\n  }\n}\n<\/code>\n<\/pre>\n\nObject card contains information about an object. It is structured in groups. Every group can have a title and items. The items contain display name (label) and value.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n\t    \"type\": \"Object\",\n     \"header\": {\n       ...\n     },\n     \"content\": {\n       \"groups\": [\n         {\n           \"title\": \"Group title\",\n           \"items\": [\n             {\n               \"label\": \"Name\",\n               \"value\": \"Ivan\"\n             },\n             {\n               \"label\": \"Surname\",\n               \"value\": \"Petrov\"\n             },\n             {\n               \"label\": \"Phone\",\n               \"value\": \"+1 1234 1234555\"\n             }\n           ]\n         },\n         {\n           \"title\": \"Organization\",\n           \"items\": [\n             {\n               \"label\": \"Company Name\",\n               \"value\": \"Sap\",\n               \"icon\": {\n                 \"src\": \"../images/Woman_avatar_02.png\"\n               }\n             }\n           ]\n         }\n       ]\n     }\n  }\n}\n<\/code>\n<\/pre>\n\nTimeline card contains a set of timeline items. The \"item\" property defines the template for all the items of the timeline.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"Timeline\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"data\": {\n        \"json\": [\n          {\n            \"Title\": \"Weekly sync: Marketplace / Design Stream\",\n            \"Description\": \"MRR WDF18 C3.2(GLASSBOX)\",\n            \"Icon\": \"sap-icon://appointment-2\",\n            \"Time\": \"10:00 - 10:30\"\n          },\n          {\n            \"Title\": \"Video Conference for FLP@SF, S4,Hybris\",\n            \"Icon\": \"sap-icon://my-view\",\n            \"Time\": \"14:00 - 15:30\"\n          },\n          {\n            \"Title\": \"Call 'Project Nimbus'\",\n            \"Icon\": \"sap-icon://outgoing-call\",\n            \"Time\": \"16:00 - 16:30\"\n          }\n        ]\n      },\n      \"item\": {\n        \"dateTime\": {\n          \"value\": \"{Time}\"\n        },\n        \"description\" : {\n          \"value\": \"{Description}\"\n        },\n        \"title\": {\n          \"value\": \"{Title}\"\n        },\n        \"icon\": {\n          \"src\": \"{Icon}\"\n        }\n      }\n    }\n  }\n}\n<\/code>\n<\/pre>\n\nTable card displays a set of items in a table format. The <code>\"row\"<\/code> property defines the template for all rows of the table.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"Table\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"data\": {\n        \"json\": [\n          {\n           \"salesOrder\": \"5000010050\",\n           \"customerName\": \"Robert Brown Entertainment\",\n           \"netAmount\": \"2K USD\",\n           \"status\": \"Delivered\",\n           \"statusState\": \"Success\"\n          },\n          {\n           \"salesOrder\": \"5000010051\",\n           \"customerName\": \"Entertainment Argentinia\",\n           \"netAmount\": \"127k USD\",\n           \"status\": \"Canceled\",\n           \"statusState\": \"Error\"\n          },\n          {\n           \"salesOrder\": \"5000010052\",\n           \"customerName\": \"Brazil Technologies\",\n           \"netAmount\": \"8K USD\",\n           \"status\": \"In Progress\",\n           \"statusState\": \"Warning\"\n          }\n        ]\n      },\n      \"row\": {\n        \"columns\": [{\n           \"title\": \"Sales Order\",\n           \"value\": \"{salesOrder}\",\n           \"identifier\": true\n          },\n          {\n            \"title\": \"Customer\",\n            \"value\": \"{customerName}\"\n          },\n          {\n             \"title\": \"Net Amount\",\n             \"value\": \"{netAmount}\"\n          },\n          {\n             \"title\": \"Status\",\n             \"value\": \"{status}\",\n             \"state\": \"{statusState}\"\n          }\n        ]\n      }\n    }\n  }\n}\n<\/code>\n<\/pre>\n\nComponent card can be used to display multiple controls (inside one Component). It is used as a custom approach for use cases, which do not fit in other card types and structures. It provides much more flexibility and responsibility to the Card\u2019s authors. Reusability is achieved on Component level and this type of Card is usable in LOB products that are based on the SAPUI5 Framework.\n\nExample: <pre>\n<code>\n{\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.integration.sample.ComponentCard.cardContent\",\n\t\t\"type\": \"card\",\n\t\t\"applicationVersion\": {\n\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.integration.sample.ComponentCard.cardContent.View\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": true,\n\t\t\t\"id\": \"app\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.38\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.m\": {}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.card\": {\n\t\t\"type\": \"Component\",\n\t\t\"header\": {\n\t\t\t\"title\": \"Visit our workshop\"\n\t\t}\n\t}\n}\n<\/code>\n<\/pre>\n\nItem-based cards (Timeline and List) have an additional <code>\"maxItems\"<\/code> content property, which defines the maximum number of items the card can have.\n\n<h3>Data Handling<\/h3> To add data to the card, you can add a data section, header or content. The card automatically creates an unnamed model which can be used to resolve binding syntaxes inside the card manifest.\n\nStatic data: <pre>\n<code>\n{\n  ...\n  \"content\": {\n    \"data\": {\n      \"json\": {\n        \"items\": [\n          {\n            \"Title\": \"Weekly sync: Marketplace / Design Stream\",\n            \"Description\": \"MRR WDF18 C3.2(GLASSBOX)\",\n            \"Icon\": \"sap-icon://appointment-2\",\n            \"Time\": \"10:00 - 10:30\"\n          },\n          {\n            \"Title\": \"Video Conference for FLP@SF, S4,Hybris\",\n            \"Icon\": \"sap-icon://my-view\",\n            \"Time\": \"14:00 - 15:30\"\n          }\n        ]\n      },\n      \"path\": \"/items\"\n    },\n    ...\n  }\n}\n<\/code>\n<\/pre>\n\nRequesting data: <pre>\n<code>\n{\n  ...\n  \"content\": {\n    \"data\": {\n      \"request\": {\n        \"url\": \"/path/to/data\"\n      },\n      \"path\": \"/items\"\n    },\n    ...\n  }\n}\n<\/code>\n<\/pre>\n\n<h3>Actions<\/h3> Actions add behavior to the card. To add a navigation action to the header and to the items, you can configure it inside the manifest.\n\nActions have: <ul> <li>Type<\/li> <li>Parameters<\/li> <li>Enabled flag (true by default)<\/li> <\/ul>\n\nIn the example below, a navigation action is added both to the header and the list items: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"List\",\n    \"header\": {\n      \"title\": \"Request list content Card\",\n      \"subTitle\": \"Card Subtitle\",\n      \"icon\": {\n        \"src\": \"sap-icon://accept\"\n      },\n      \"status\": \"100 of 200\",\n      \"actions\": [\n        {\n          \"type\": \"Navigation\",\n          \"parameters\": {\n            \"url\": \"/some/relative/path\"\n          }\n        }\n      ]\n    },\n    \"content\": {\n      \"data\": {\n        \"request\": {\n          \"url\": \"./cardcontent/someitems_services2.json\"\n        },\n        \"path\": \"/items\"\n      },\n      \"item\": {\n        \"icon\": {\n          \"src\": \"{icon}\"\n        },\n        \"title\": {\n          \"value\": \"{Name}\"\n        },\n        \"description\": {\n          \"value\": \"{Description}\"\n        },\n        \"actions\": [\n          {\n            \"type\": \"Navigation\",\n            \"enabled\": \"{= ${url}}\",\n            \"parameters\": {\n              \"url\": \"{url}\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n<\/code>\n<\/pre>\n\n<i>When to use<\/i> <ul> <li>When you want to reuse the card across apps.<\/li> <li>When you need easy integration and configuration.<\/li> <\/ul>\n\n<i>When not to use<\/i> <ul> <li>When you need more header and content flexibility.<\/li> <li>When you have to achieve simple card visualization. For such cases, use: {@link sap.f.Card Card}.<\/li> <li>When you have to use an application model. For such cases, use: {@link sap.f.Card Card}.<\/li> <li>When you need complex behavior. For such cases, use: {@link sap.f.Card Card}.<\/li> <\/ul>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.widgets.Card.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getCardContent":{"!description":"Implements sap.f.ICard interface.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"refresh":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn()"},"setManifest":{"!description":"Overwrites setter for card manifest.","!static":false,"!category":"function","!type":"fn(vValue: String | Object) -> sap.ui.integration.widgets.Card","parameters":{"vValue":"type: string|Object, description: The manifest object or its URL."}},"detachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nDefines the height of the card.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.integration.widgets.Card","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nDefines the width of the card.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.integration.widgets.Card","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.widgets.Card with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/integration/widgets/Card","!helpDescription":"A control that represents a container with a header and content.\n\n<h3>Overview<\/h3> Cards are small user interface elements which provide the most important information from an app, related to a specific role or task. The information is represented in a compact manner, allowing for actions to be executed. Cards can be described as small representations of an app which can be integrated in different systems.\n\nThe integration card is defined in a declarative way, using a manifest.json to be: <ul> <li>Easily integrated into apps<\/li> <li>Easily reused across apps<\/li> <li>Understandable by other technologies<\/li> <li>Self-contained (without external configuration)<\/li> <li>Easily reconfigured in app layers (including backend)<\/li> <li>Easy to separate the roles of the card and the app developers<\/li> <\/ul>\n\nThe role of the card developer is to describe the card in a manifest.json file and define: <ul> <li>Header<\/li> <li>Content<\/li> <li>Data source<\/li> <li>Possible actions<\/li> <\/ul>\n\nThe role of the app developer is to integrate the card into the app and define: <ul> <li>The dimensions of the card inside a layout of choice, using the <code>width<\/code> and <code>height<\/code> properties<\/li> <li>The behavior for the actions described in the manifest.json file, using the action event<\/li> <\/ul>\n\n<h3>Usage<\/h3>\n\nThe <code>\"sap.app\"<\/code> <code>type<\/code> property in the manifest file must be set to <code>\"card\"<\/code>. The namespace used to define a card is <code>\"sap.card\"<\/code>. Every card has a type which can be one of the following: List, Analytical, Timeline, Object, Table, Component (experimental)\n\nAn example of a manifest.json:\n\n<pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\",\n    ...\n  },\n  \"sap.ui5\": {\n    ...\n  },\n  \"sap.card\": {\n    \"type\": \"List\",\n    \"header\": { ... },\n    \"content\": { ... }\n  }\n}\n<\/code>\n<\/pre>\n\nExamples of header sections:\n\nThe default header type can contain title, subtitle, icon, and status. <pre>\n <code>\n{\n  ...\n  \"sap.card\": {\n    \"header\": {\n      \"title\": \"An example title\",\n      \"subTitle\": \"Some subtitle\",\n      \"icon\": {\n        \"src\": \"sap-icon://business-objects-experience\"\n      },\n      \"status\": {\n        \"text\": \"5 of 20\"\n      }\n    },\n    ...\n  }\n}\n <\/code>\n <\/pre>\n\nThe numeric header type can contain title, subtitle, unitOfMeasurement, details, main indicator, and side indicators. <pre>\n <code>\n{\n  ...\n  \"sap.card\": {\n    \"header\": {\n      \"type\": \"Numeric\",\n      \"title\": \"Project Cloud Transformation\",\n      \"subTitle\": \"Revenue\",\n      \"unitOfMeasurement\": \"EUR\",\n      \"mainIndicator\": {\n        \"number\": \"44\",\n        \"unit\": \"%\",\n        \"trend\": \"Down\",\n        \"state\": \"Critical\"\n      },\n      \"details\": \"Some details\",\n      \"sideIndicators\": [\n        {\n          \"title\": \"Target\",\n          \"number\": \"17\",\n          \"unit\": \"%\"\n        },\n        {\n          \"title\": \"Deviation\",\n          \"number\": \"5\",\n          \"unit\": \"%\"\n        }\n      ]\n    },\n    ...\n  }\n}\n <\/code>\n <\/pre>\n\nThe content of the card is created based on the card type. Possible card types: <ul> <li>List<\/li> <li>Object<\/li> <li>Timeline<\/li> <li>Analytical<\/li> <li>Table<\/li> <li>Component (experimental)<\/li> <\/ul>\n\nList card contains a set of items. The <code>\"item\"<\/code> property defines the template for all the items of the list. The <code>\"data\"<\/code> property provides the displayed information.\n\nExample: <pre>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"List\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"data\": {\n        \"json\": [{\n            \"Name\": \"Comfort Easy\",\n            \"Description\": \"A 32 GB Digital Assistant with a high-resolution color screen\",\n            \"Highlight\": \"Error\"\n          },\n          {\n            \"Name\": \"ITelO Vault\",\n            \"Description\": \"A Digital Organizer with state-of-the-art Storage Encryption\",\n            \"Highlight\": \"Warning\"\n          },\n          {\n            \"Name\": \"Notebook Professional 15\",\n            \"Description\": \"Notebook Professional 15 description\",\n            \"Highlight\": \"Success\"\n          }\n        ]\n      },\n      \"item\": {\n        \"title\": {\n          \"label\": \"{{title_label}}\",\n          \"value\": \"{Name}\"\n        },\n        \"description\": {\n          \"label\": \"{{description_label}}\",\n          \"value\": \"{Description}\"\n        },\n        \"highlight\": \"{Highlight}\"\n      }\n    }\n  }\n}\n<\/pre>\n\nAnalytical card contains a chart visualization configuration. Supported chart types are Line, StackedBar, StackedColumn, Donut.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"Analytical\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"chartType\": \"Line\",\n      \"legend\": {\n        \"visible\": true,\n        \"position\": \"Bottom\",\n        \"alignment\": \"Left\"\n      },\n      \"plotArea\": {\n        \"dataLabel\": {\n          \"visible\": true\n        },\n        \"categoryAxisText\": {\n          \"visible\": false\n        },\n        \"valueAxisText\": {\n          \"visible\": false\n        }\n      },\n      \"title\": {\n        \"text\": \"Line chart\",\n        \"visible\": true,\n        \"alignment\": \"Left\"\n      },\n      \"measureAxis\": \"valueAxis\",\n      \"dimensionAxis\": \"categoryAxis\",\n      \"data\": {\n        \"json\": {\n          \"list\": [\n            {\n              \"Week\": \"CW14\",\n              \"Revenue\": 431000.22,\n              \"Cost\": 230000.00,\n              \"Cost1\": 24800.63,\n              \"Cost2\": 205199.37,\n              \"Cost3\": 199999.37,\n              \"Target\": 500000.00,\n              \"Budget\": 210000.00\n            },\n            {\n              \"Week\": \"CW15\",\n              \"Revenue\": 494000.30,\n              \"Cost\": 238000.00,\n              \"Cost1\": 99200.39,\n              \"Cost2\": 138799.61,\n              \"Cost3\": 200199.37,\n              \"Target\": 500000.00,\n              \"Budget\": 224000.00\n            }\n          ]\n        },\n        \"path\": \"/list\"\n      },\n      \"dimensions\": [\n        {\n          \"label\": \"Weeks\",\n          \"value\": \"{Week}\"\n        }\n      ],\n      \"measures\": [\n        {\n          \"label\": \"Revenue\",\n          \"value\": \"{Revenue}\"\n        },\n        {\n          \"label\": \"Cost\",\n          \"value\": \"{Cost}\"\n        }\n      ]\n    }\n  }\n}\n<\/code>\n<\/pre>\n\nObject card contains information about an object. It is structured in groups. Every group can have a title and items. The items contain display name (label) and value.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n\t    \"type\": \"Object\",\n     \"header\": {\n       ...\n     },\n     \"content\": {\n       \"groups\": [\n         {\n           \"title\": \"Group title\",\n           \"items\": [\n             {\n               \"label\": \"Name\",\n               \"value\": \"Ivan\"\n             },\n             {\n               \"label\": \"Surname\",\n               \"value\": \"Petrov\"\n             },\n             {\n               \"label\": \"Phone\",\n               \"value\": \"+1 1234 1234555\"\n             }\n           ]\n         },\n         {\n           \"title\": \"Organization\",\n           \"items\": [\n             {\n               \"label\": \"Company Name\",\n               \"value\": \"Sap\",\n               \"icon\": {\n                 \"src\": \"../images/Woman_avatar_02.png\"\n               }\n             }\n           ]\n         }\n       ]\n     }\n  }\n}\n<\/code>\n<\/pre>\n\nTimeline card contains a set of timeline items. The \"item\" property defines the template for all the items of the timeline.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"Timeline\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"data\": {\n        \"json\": [\n          {\n            \"Title\": \"Weekly sync: Marketplace / Design Stream\",\n            \"Description\": \"MRR WDF18 C3.2(GLASSBOX)\",\n            \"Icon\": \"sap-icon://appointment-2\",\n            \"Time\": \"10:00 - 10:30\"\n          },\n          {\n            \"Title\": \"Video Conference for FLP@SF, S4,Hybris\",\n            \"Icon\": \"sap-icon://my-view\",\n            \"Time\": \"14:00 - 15:30\"\n          },\n          {\n            \"Title\": \"Call 'Project Nimbus'\",\n            \"Icon\": \"sap-icon://outgoing-call\",\n            \"Time\": \"16:00 - 16:30\"\n          }\n        ]\n      },\n      \"item\": {\n        \"dateTime\": {\n          \"value\": \"{Time}\"\n        },\n        \"description\" : {\n          \"value\": \"{Description}\"\n        },\n        \"title\": {\n          \"value\": \"{Title}\"\n        },\n        \"icon\": {\n          \"src\": \"{Icon}\"\n        }\n      }\n    }\n  }\n}\n<\/code>\n<\/pre>\n\nTable card displays a set of items in a table format. The <code>\"row\"<\/code> property defines the template for all rows of the table.\n\nExample: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"Table\",\n    \"header\": {\n      ...\n    },\n    \"content\": {\n      \"data\": {\n        \"json\": [\n          {\n           \"salesOrder\": \"5000010050\",\n           \"customerName\": \"Robert Brown Entertainment\",\n           \"netAmount\": \"2K USD\",\n           \"status\": \"Delivered\",\n           \"statusState\": \"Success\"\n          },\n          {\n           \"salesOrder\": \"5000010051\",\n           \"customerName\": \"Entertainment Argentinia\",\n           \"netAmount\": \"127k USD\",\n           \"status\": \"Canceled\",\n           \"statusState\": \"Error\"\n          },\n          {\n           \"salesOrder\": \"5000010052\",\n           \"customerName\": \"Brazil Technologies\",\n           \"netAmount\": \"8K USD\",\n           \"status\": \"In Progress\",\n           \"statusState\": \"Warning\"\n          }\n        ]\n      },\n      \"row\": {\n        \"columns\": [{\n           \"title\": \"Sales Order\",\n           \"value\": \"{salesOrder}\",\n           \"identifier\": true\n          },\n          {\n            \"title\": \"Customer\",\n            \"value\": \"{customerName}\"\n          },\n          {\n             \"title\": \"Net Amount\",\n             \"value\": \"{netAmount}\"\n          },\n          {\n             \"title\": \"Status\",\n             \"value\": \"{status}\",\n             \"state\": \"{statusState}\"\n          }\n        ]\n      }\n    }\n  }\n}\n<\/code>\n<\/pre>\n\nComponent card can be used to display multiple controls (inside one Component). It is used as a custom approach for use cases, which do not fit in other card types and structures. It provides much more flexibility and responsibility to the Card\u2019s authors. Reusability is achieved on Component level and this type of Card is usable in LOB products that are based on the SAPUI5 Framework.\n\nExample: <pre>\n<code>\n{\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.integration.sample.ComponentCard.cardContent\",\n\t\t\"type\": \"card\",\n\t\t\"applicationVersion\": {\n\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.integration.sample.ComponentCard.cardContent.View\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": true,\n\t\t\t\"id\": \"app\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.38\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.m\": {}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.card\": {\n\t\t\"type\": \"Component\",\n\t\t\"header\": {\n\t\t\t\"title\": \"Visit our workshop\"\n\t\t}\n\t}\n}\n<\/code>\n<\/pre>\n\nItem-based cards (Timeline and List) have an additional <code>\"maxItems\"<\/code> content property, which defines the maximum number of items the card can have.\n\n<h3>Data Handling<\/h3> To add data to the card, you can add a data section, header or content. The card automatically creates an unnamed model which can be used to resolve binding syntaxes inside the card manifest.\n\nStatic data: <pre>\n<code>\n{\n  ...\n  \"content\": {\n    \"data\": {\n      \"json\": {\n        \"items\": [\n          {\n            \"Title\": \"Weekly sync: Marketplace / Design Stream\",\n            \"Description\": \"MRR WDF18 C3.2(GLASSBOX)\",\n            \"Icon\": \"sap-icon://appointment-2\",\n            \"Time\": \"10:00 - 10:30\"\n          },\n          {\n            \"Title\": \"Video Conference for FLP@SF, S4,Hybris\",\n            \"Icon\": \"sap-icon://my-view\",\n            \"Time\": \"14:00 - 15:30\"\n          }\n        ]\n      },\n      \"path\": \"/items\"\n    },\n    ...\n  }\n}\n<\/code>\n<\/pre>\n\nRequesting data: <pre>\n<code>\n{\n  ...\n  \"content\": {\n    \"data\": {\n      \"request\": {\n        \"url\": \"/path/to/data\"\n      },\n      \"path\": \"/items\"\n    },\n    ...\n  }\n}\n<\/code>\n<\/pre>\n\n<h3>Actions<\/h3> Actions add behavior to the card. To add a navigation action to the header and to the items, you can configure it inside the manifest.\n\nActions have: <ul> <li>Type<\/li> <li>Parameters<\/li> <li>Enabled flag (true by default)<\/li> <\/ul>\n\nIn the example below, a navigation action is added both to the header and the list items: <pre>\n<code>\n{\n  \"sap.app\": {\n    \"type\": \"card\"\n  },\n  \"sap.card\": {\n    \"type\": \"List\",\n    \"header\": {\n      \"title\": \"Request list content Card\",\n      \"subTitle\": \"Card Subtitle\",\n      \"icon\": {\n        \"src\": \"sap-icon://accept\"\n      },\n      \"status\": \"100 of 200\",\n      \"actions\": [\n        {\n          \"type\": \"Navigation\",\n          \"parameters\": {\n            \"url\": \"/some/relative/path\"\n          }\n        }\n      ]\n    },\n    \"content\": {\n      \"data\": {\n        \"request\": {\n          \"url\": \"./cardcontent/someitems_services2.json\"\n        },\n        \"path\": \"/items\"\n      },\n      \"item\": {\n        \"icon\": {\n          \"src\": \"{icon}\"\n        },\n        \"title\": {\n          \"value\": \"{Name}\"\n        },\n        \"description\": {\n          \"value\": \"{Description}\"\n        },\n        \"actions\": [\n          {\n            \"type\": \"Navigation\",\n            \"enabled\": \"{= ${url}}\",\n            \"parameters\": {\n              \"url\": \"{url}\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n<\/code>\n<\/pre>\n\n<i>When to use<\/i> <ul> <li>When you want to reuse the card across apps.<\/li> <li>When you need easy integration and configuration.<\/li> <\/ul>\n\n<i>When not to use<\/i> <ul> <li>When you need more header and content flexibility.<\/li> <li>When you have to achieve simple card visualization. For such cases, use: {@link sap.f.Card Card}.<\/li> <li>When you have to use an application model. For such cases, use: {@link sap.f.Card Card}.<\/li> <li>When you need complex behavior. For such cases, use: {@link sap.f.Card Card}.<\/li> <\/ul>","setHostConfigurationId":{"!description":"Sets the associated {@link #getHostConfigurationId hostConfigurationId}.","!static":false,"!category":"function","!type":"fn(oHostConfigurationId: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.integration.widgets.Card","parameters":{"oHostConfigurationId":"type: sap.ui.core.ID|sap.ui.core.Control, description: ID of an element which becomes the new target of this hostConfigurationId association; alternatively, an element instance may be given"}},"getParameters":{"!description":"Overwrites getter for card parameters.","!static":false,"!category":"function","!type":"fn() -> Object"},"getHostConfigurationId":{"!description":"ID of the element which is the current target of the association {@link #getHostConfigurationId hostConfigurationId}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"}}}}